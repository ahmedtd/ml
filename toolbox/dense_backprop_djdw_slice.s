// Code generated by command: go run asm_dense_backprop_djdw_slice.go -out dense_backprop_djdw_slice.s -stubs stub_dense_backprop_djdw_slice.go. DO NOT EDIT.

#include "textflag.h"

// func denseBackpropDjdwSliceKernel(batchSize int, inputSize int, djdaT []float32, dadzT []float32, xT []float32, djdw []float32, iStart int, jStart int, elementsToCompute int)
// Requires: AVX, FMA3
TEXT Â·denseBackpropDjdwSliceKernel(SB), NOSPLIT, $0-136
	MOVQ  batchSize+0(FP), AX
	MOVQ  inputSize+8(FP), CX
	MOVQ  djdaT_base+16(FP), DX
	MOVQ  dadzT_base+40(FP), BX
	MOVQ  xT_base+64(FP), SI
	MOVQ  elementsToCompute+128(FP), DI
	MOVQ  iStart+112(FP), R8
	MOVQ  jStart+120(FP), R9
	MOVQ  djdw_base+88(FP), R10
	MOVQ  $0x00000004, R11
	IMULQ CX, R11
	IMULQ R8, R11
	ADDQ  R11, R10

	// The outer loop, running over elements of djdw in-order
outerLoop:
	CMPQ   DI, $0x00000000
	JE     outerLoopExit
	VXORPS Y0, Y0, Y0
	VXORPS Y1, Y1, Y1
	VXORPS Y2, Y2, Y2
	VXORPS Y3, Y3, Y3
	VXORPS Y4, Y4, Y4
	VXORPS Y5, Y5, Y5

	// Make copies of djdaPtr, dadzPtr, and xTPtr
	MOVQ  $0x00000004, R11
	IMULQ AX, R11
	IMULQ R8, R11
	ADDQ  DX, R11
	MOVQ  $0x00000004, R12
	IMULQ AX, R12
	IMULQ R8, R12
	ADDQ  BX, R12
	MOVQ  $0x00000004, R13
	IMULQ AX, R13
	IMULQ R9, R13
	ADDQ  SI, R13

	// The inner loop, running over batchSize elements of djdaT, dadzT, and xT in-order
	MOVQ AX, R14

dotproductblockloop:
	CMPQ        R14, $0x00000030
	JL          dotproducttail
	VMOVUPS     (R11), Y6
	VMOVUPS     32(R11), Y7
	VMOVUPS     64(R11), Y8
	VMOVUPS     96(R11), Y9
	VMOVUPS     128(R11), Y10
	VMOVUPS     160(R11), Y11
	VMULPS      (R12), Y6, Y6
	VMULPS      32(R12), Y7, Y7
	VMULPS      64(R12), Y8, Y8
	VMULPS      96(R12), Y9, Y9
	VMULPS      128(R12), Y10, Y10
	VMULPS      160(R12), Y11, Y11
	VFMADD231PS (R13), Y6, Y0
	VFMADD231PS 32(R13), Y7, Y1
	VFMADD231PS 64(R13), Y8, Y2
	VFMADD231PS 96(R13), Y9, Y3
	VFMADD231PS 128(R13), Y10, Y4
	VFMADD231PS 160(R13), Y11, Y5
	ADDQ        $0x000000c0, R11
	ADDQ        $0x000000c0, R12
	ADDQ        $0x000000c0, R13
	SUBQ        $0x00000030, R14
	JMP         dotproductblockloop

dotproducttail:
	VXORPS X6, X6, X6

dotproducttailloop:
	CMPQ        R14, $0x00000000
	JE          dotproductreduce
	VMOVSS      (R12), X7
	VMULSS      (R11), X7, X7
	VFMADD231SS (R13), X7, X6
	ADDQ        $0x00000004, R12
	ADDQ        $0x00000004, R11
	ADDQ        $0x00000004, R13
	DECQ        R14
	JMP         dotproducttailloop

dotproductreduce:
	VADDPS       Y0, Y1, Y0
	VADDPS       Y0, Y2, Y0
	VADDPS       Y0, Y3, Y0
	VADDPS       Y0, Y4, Y0
	VADDPS       Y0, Y5, Y0
	VEXTRACTF128 $0x01, Y0, X1
	VADDPS       X0, X1, X0
	VADDPS       X0, X6, X0
	VHADDPS      X0, X0, X0
	VHADDPS      X0, X0, X0
	VEXTRACTPS   $0x00, X0, (R10)
	ADDQ         $0x00000004, R10
	INCQ         R9
	CMPQ         R9, CX
	JNE          afterIJ
	MOVQ         $0x00000000, R9
	INCQ         R8

afterIJ:
	DECQ DI
	JMP  outerLoop

outerLoopExit:
	RET
